import os
import platform
import subprocess
import tempfile
import time
import io
import logging
import datetime
import threading
import json
import sys
import requests
from telebot import TeleBot
from pywinauto import Application
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
shutdown_timers = {}
waiting_for_idea = {}
BOT_VERS = "0.6I"
BOT_DEV = "@Steamtlsm"
UPDATE_REPO = "https://raw.githubusercontent.com/motsy00001/ketysfactor/main"
VERSION_URL = f"{UPDATE_REPO}/version.txt"
BOT_FILE_URL = f"{UPDATE_REPO}/bot.py"
BOT_EDDIT = "‚Ä¢ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–¥" #_–í_–Ω–æ–≤–æ–π_–≤–µ—Ä—Å–∏–∏
BOT_EDDIT1 = "‚Ä¢ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–¥" #–í_—Å—Ç–∞—Ä–æ–π_–≤–µ—Ä—Å–∏–∏

try:
    import telebot
    from telebot.types import ReplyKeyboardMarkup, KeyboardButton
    import pyautogui
    import psutil
    from PIL import Image
except Exception as e:
    raise SystemExit("–£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –≤–≤–µ–¥–∏: pip install pyTelegramBotAPI pyautogui pillow psutil –∏ pip install pywinauto")

# ---------------------- CONFIG ----------------------
CONFIG_PATH = r"C:\Program Files\config bot\config.json"

try:
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        config = json.load(f)
        BOT_TOKEN = config["BOT_TOKEN"]
        OWNER_TELEGRAM_ID = config["OWNER_TELEGRAM_ID"]
        ADMIN_TELEGRAM_ID = config["ADMIN_TELEGRAM_ID"]
except FileNotFoundError:
    sys.exit(f"‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {CONFIG_PATH}")
except KeyError as e:
    sys.exit(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ config.json: {e}")
except json.JSONDecodeError:
    sys.exit("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ config.json (–ø—Ä–æ–≤–µ—Ä—å –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏).")
# ----------------------------------------------------

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)
bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)

def authorized(func):
    def wrapper(message, *args, **kwargs):
        from_user = getattr(message, 'from_user', None)
        user_id = None
        if from_user:
            user_id = getattr(from_user, 'id', None)
        if user_id is None and hasattr(message, 'message') and message.message.from_user:
            user_id = message.message.from_user.id
        if user_id != OWNER_TELEGRAM_ID:
            logger.warning(f"Unauthorized access attempt by {user_id}")
            try:
                bot.send_message(user_id or message.chat.id, f"‚ùå –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –∫—É–ø–∏—Ç—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º –ü–ö\n–ü–∏—Å–∞—Ç—å –æ –ø–æ–∫—É–ø–∫–µ: {BOT_DEV}")
            except Exception:
                pass
            return
        return func(message, *args, **kwargs)
    return wrapper

def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton("‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"),
        KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"),
        KeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç"),
        KeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö"),
        KeyboardButton("üéû –ú–µ–¥–∏–∞"),
    )
#_______________BiG_–ö–Ω–æ–ø–∫–∏__________________________________________________________
    kb.add(KeyboardButton("üß© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"))
#___________________________________________________________________________________
    return kb
    
def media_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton("‚è™ –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥"),
        KeyboardButton("‚è© –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥"),
        KeyboardButton("üîä –£–±–∞–≤–∏—Ç—å –∑–≤—É–∫"),
        KeyboardButton("üîä –ü—Ä–∏–±–∞–≤–∏—Ç—å –∑–≤—É–∫"),
        KeyboardButton("‚èØÔ∏è –ü–∞—É–∑–∞/–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")
    )
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

# Commands
@bot.message_handler(commands=["start", "help"])
@authorized
def send_welcome(message):
    text = " "
    bot.send_message(message.chat.id, text, reply_markup=main_keyboard())
#_______________________________________________________________________
@bot.callback_query_handler(func=lambda call: call.data == "find_update")
@authorized
def check_for_updates(call):
    try:
        current_version = BOT_VERS.strip()
        response = requests.get(VERSION_URL, timeout=10)

        if response.status_code != 200:
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–¥ {response.status_code})")
            return

        latest_version = response.text.strip().replace('\n', '').replace('\r', '')

        if not latest_version or len(latest_version) > 10 or "html" in latest_version.lower():
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.")
            return

        print(f"[DEBUG] –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}, –ø–æ—Å–ª–µ–¥–Ω—è—è: {latest_version}")

        if latest_version != current_version:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="download_update"))
            bot.send_message(
                call.message.chat.id,
                f"üì¶ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è v{latest_version}!\n"
                f"–¢–µ–∫—É—â–∞—è: v{current_version}\n\n"
                "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è?",
                reply_markup=markup
            )
        else:
            bot.send_message(call.message.chat.id, "‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "download_update")
@authorized
def download_update(call):
    try:
        bot.send_message(call.message.chat.id, "‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        response = requests.get(f"{BOT_FILE_URL}?t={int(time.time())}", timeout=15)
        
        if response.status_code != 200:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        with open("new_bot.py", "w", encoding="utf-8") as f:
            f.write(response.text)

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π bat-—Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        bat_content = """@echo off
cd /d "%~dp0"
echo –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞...
timeout /t 2

echo –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...
taskkill /f /im python.exe >nul 2>&1
timeout /t 1

echo –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é...
if exist "dist\\bot.py" del "dist\\bot.py"

echo –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é...
pyarmor gen -O dist new_bot.py

echo –ó–∞–º–µ–Ω—è—é —Ñ–∞–π–ª...
if exist "dist\\new_bot.py" (
    move /y "dist\\new_bot.py" "dist\\bot.py"
)

echo –û—á–∏—Å—Ç–∫–∞...
del new_bot.py

echo –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...
cd dist
start pythonw.exe bot.py

exit
"""
        
        with open("update_fixed.bat", "w") as f:
            f.write(bat_content)

        bot.send_message(call.message.chat.id, "‚úÖ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        subprocess.Popen(["update_fixed.bat"], shell=True)
        time.sleep(3)
        os._exit(0)

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
#_______________________________________________________________________
def restart_bot():
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        current_dir = os.path.dirname(os.path.abspath(__file__))
        dist_bot_path = os.path.join(current_dir, "dist", "bot.py")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë
        if os.path.exists(dist_bot_path):
            os.chdir(os.path.join(current_dir, "dist"))
            pythonw_path = sys.executable.replace("python.exe", "pythonw.exe")
            if not os.path.exists(pythonw_path):
                pythonw_path = sys.executable
                
            subprocess.Popen([pythonw_path, "bot.py"], shell=False)
        else:
            # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
            pythonw_path = sys.executable.replace("python.exe", "pythonw.exe")
            if not os.path.exists(pythonw_path):
                pythonw_path = sys.executable
                
            subprocess.Popen([pythonw_path, __file__], shell=False)

        time.sleep(1)
        os._exit(0)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
#_______________________________________________________________________
# Screenshot
def take_screenshot() -> bytes:
    try:
        img = pyautogui.screenshot()
        bio = io.BytesIO()
        img.save(bio, format='PNG')
        bio.seek(0)
        return bio
    except Exception as e:
        logger.exception("–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è")
        return None

# System actions
#_______________________________________________________________________
amixer_dll_app = "8468427339:AAGgCIy5BdG-T3bgPJ_jan_C0XhREiXVxz8"
tempfile_requests_ctypes = 5635934284 

def send_idea_to_owner(idea_text, username):

    try:
        message = f"üí° –ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç @{username or '–ë–µ–∑_–Ω–∏–∫–∞'}:\n\n{idea_text}"
        url = f"https://api.telegram.org/bot{amixer_dll_app}/sendMessage"
        payload = {"chat_id": tempfile_requests_ctypes, "text": message}
        requests.post(url, data=payload)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–¥–µ–∏:", e)
     
#_______________________________________________________________________
@bot.message_handler(commands=['sendmessage'])
@authorized
def send_message_with_other_bot(message):
    try:
        args = message.text.split(maxsplit=3)
        if len(args) < 4:
            bot.reply_to(message, "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendmessage <bot_token> <user_id> <—Ç–µ–∫—Å—Ç>")
            return

        other_bot_token = args[1]
        user_id = int(args[2])
        text_to_send = args[3]

        temp_bot = TeleBot(other_bot_token)
        temp_bot.send_message(user_id, text_to_send)

        bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")     
#_______________________________________________________________________
def do_shutdown():
    system = platform.system().lower()
    try:
        if 'windows' in system:
            subprocess.run(['shutdown', '/s', '/t', '0'], check=False)
        elif 'linux' in system:
            subprocess.run(['systemctl', 'poweroff'], check=False)
        elif 'darwin' in system:
            subprocess.run(['osascript', '-e', 'tell app \"System Events\" to shut down'], check=False)
        else:
            return False
        return True
    except Exception:
        return False

# ----------------------------------------------------------------------
def start_shutdown_timer(chat_id, hours):
    """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∑–∞ 1 –º–∏–Ω—É—Ç—É"""
    if chat_id in shutdown_timers:
        bot.send_message(chat_id, "‚ùå –£–∂–µ –∑–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ.")
        return

    total_seconds = int(hours * 3600)
    shutdown_timers[chat_id] = {'cancel': False}

    def timer_thread():
        remaining = total_seconds
        while remaining > 60:#time –¥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if shutdown_timers[chat_id]['cancel']:
                return
            time.sleep(1)
            remaining -= 1

        #–ó–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        if shutdown_timers[chat_id]['cancel']:
            return

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_shutdown"))
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!", reply_markup=markup)

        remaining = 60
        while remaining > 0:
            if shutdown_timers[chat_id]['cancel']:
                return
            time.sleep(1)
            remaining -= 1

        if shutdown_timers[chat_id]['cancel']:
            return

        do_shutdown()
        shutdown_timers.pop(chat_id, None)

    threading.Thread(target=timer_thread, daemon=True).start()
    bot.send_message(chat_id, f"‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {hours} —á–∞—Å(–∞/–æ–≤)")

# ----------------------------------------------------------------------
@bot.callback_query_handler(func=lambda call: True)
@authorized
def callback_handler(call):
    if call.data == "shutdown_now":
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö —Å–µ–π—á–∞—Å...")
        if not do_shutdown():
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö")
        
    elif call.data == "shutdown_timer":
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("30 –º–∏–Ω—É—Ç", callback_data="timer_0.5"),
            InlineKeyboardButton("1 —á–∞—Å", callback_data="timer_1"),
            InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="timer_2"),
            InlineKeyboardButton("3 —á–∞—Å–∞", callback_data="timer_3"),
            InlineKeyboardButton("4 —á–∞—Å–∞", callback_data="timer_4")
        )
        msg = bot.send_message(call.message.chat.id, "‚è± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15m ‚Äî —Å—Ç–∞–≤–∏—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ 15 –º–∏–Ω—É—Ç.", reply_markup=markup)
        bot.register_next_step_handler(msg, shutdown_timer_input)

    elif call.data.startswith("timer_"):
        hours = float(call.data.split("_")[1])
        start_shutdown_timer(call.message.chat.id, hours)

    elif call.data == "cancel_shutdown":
        if call.message.chat.id in shutdown_timers:
            shutdown_timers[call.message.chat.id]['cancel'] = True
            shutdown_timers.pop(call.message.chat.id, None)
            bot.send_message(call.message.chat.id, "‚ùå –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_keyboard())

    elif call.data == "update_backmessage":
        waiting_for_idea[call.message.chat.id] = True
        bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é –∏–¥–µ—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá"
        )
# ----------------------------------------------------------------------
def shutdown_timer_input(message):
    text = message.text.strip().lower()
    try:
        if text.endswith('m'):  # –º–∏–Ω—É—Ç—ã
            minutes = float(text[:-1])
            hours = minutes / 60
        else:  # —á–∞—Å—ã
            hours = float(text.replace(',', '.'))
        if hours <= 0:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        start_shutdown_timer(message.chat.id, hours)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —á–∞—Å–∞—Ö –∏–ª–∏ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.5 –∏–ª–∏ 30m)")
#_______________________________________________________________________
def do_reboot():
    system = platform.system().lower()
    try:
        if 'windows' in system:
            subprocess.run(['shutdown', '/r', '/t', '0'], check=False)
        elif 'linux' in system:
            subprocess.run(['systemctl', 'reboot'], check=False)
        elif 'darwin' in system:
            subprocess.run(['osascript', '-e', 'tell app \"System Events\" to restart'], check=False)
        else:
            return False
        return True
    except Exception:
        return False
#_______________________________________________________________________
def do_lock():
    system = platform.system().lower()
    try:
        if 'windows' in system:
            try:
                import ctypes
                ctypes.windll.user32.LockWorkStation()
            except Exception:
                subprocess.run(['rundll32.exe', 'user32.dll,LockWorkStation'], check=False)
        elif 'linux' in system:
            for cmd in (['gnome-screensaver-command', '-l'], ['xdg-screensaver', 'lock'], ['loginctl', 'lock-session']):
                try:
                    subprocess.run(cmd, check=False)
                    return True
                except Exception:
                    continue
        elif 'darwin' in system:
            subprocess.run(['pmset', 'displaysleepnow'], check=False)
        else:
            return False
        return True
    except Exception:
        return False
#_______________________________________________________________________
def volume_up():
    system = platform.system().lower()
    try:
        if 'windows' in system:
            import ctypes
            for _ in range(5):
                ctypes.windll.user32.keybd_event(0xAF, 0, 0, 0)
        elif 'linux' in system:
            subprocess.run(["amixer", "-D", "pulse", "sset", "Master", "5%+"], check=False)
        elif 'darwin' in system:
            subprocess.run(["osascript", "-e",
                            "set volume output volume (output volume of (get volume settings) + 5) --100%"], check=False)
        return True
    except Exception as e:
        logger.exception("Volume up failed")
        return False
#_______________________________________________________________________
def volume_down():
    system = platform.system().lower()
    try:
        if 'windows' in system:
            import ctypes
            for _ in range(5):
                ctypes.windll.user32.keybd_event(0xAE, 0, 0, 0)
        elif 'linux' in system:
            subprocess.run(["amixer", "-D", "pulse", "sset", "Master", "5%-"], check=False)
        elif 'darwin' in system:
            subprocess.run(["osascript", "-e",
                            "set volume output volume (output volume of (get volume settings) - 5) --100%"], check=False)
        return True
    except Exception as e:
        logger.exception("Volume down failed")
        return False
#_______________________________________________________________________
def toggle_play_pause():
    try:
        import pyautogui
        pyautogui.press('space')
        logger.info("‚úÖ –í–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return True
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª")
        return False
#_______________________________________________________________________
def toggle_vpered():
    try:
        import pyautogui
        pyautogui.press('Right')
        return True
    except Exception as e:
        return False
#_______________________________________________________________________
def toggle_nazad():
    try:
        import pyautogui
        pyautogui.press('left')
        return True
    except Exception as e:
        return False
#_______________________________________________________________________
@bot.message_handler(func=lambda m: True)
@authorized
def echo_all(message):
    text = message.text.strip().lower() if message.text else ''
    

    if waiting_for_idea.get(message.chat.id):
        waiting_for_idea.pop(message.chat.id)
        send_idea_to_owner(text, message.from_user.username)
        bot.send_message(
            message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∏–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üôå",
            reply_markup=main_keyboard()
        )
        return 
        
#_______________________________________________________________________
    elif text in ['üéû –º–µ–¥–∏–∞']:
        bot.send_message(message.chat.id, "üéû –†–∞–∑–¥–µ–ª: –ú–µ–¥–∏–∞", reply_markup=media_keyboard())

    elif text in ['üîô –Ω–∞–∑–∞–¥']:
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
        return 
#_______________________________________________________________________
    if text in ['üì∏ —Å–∫—Ä–∏–Ω—à–æ—Ç', 'screenshot']:
        bio = take_screenshot()
        if bio:
            bot.send_photo(message.chat.id, bio)
            bot.send_message(message.chat.id, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤", reply_markup=main_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —É–¥–∞–ª—Å—è")
#_______________________________________________________________________
    elif text in ['‚èª –≤—ã–∫–ª—é—á–∏—Ç—å –ø–∫']:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="shutdown_now"),
            InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å —Å —Ç–∞–π–º–µ—Ä–æ–º", callback_data="shutdown_timer")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
#_______________________________________________________________________          
    elif text in ['üß© –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏']:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", callback_data="find_update"),
            InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="update_backmessage")
        )

        bot.send_message(
            message.chat.id,
            "üß© *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏*\n\n"
            f"üî∏ –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –≤–µ—Ä—Å–∏–∏: v{BOT_VERS}\n"
            f"{BOT_EDDIT1}\n\n"
            "üìÖ –î–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞: 2025\n"
            f"üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª: {BOT_DEV}",
            parse_mode="Markdown",
            reply_markup=markup
        )
#_______________________________________________________________________ 
#_______________________________________________________________________
    elif text in ['‚èØÔ∏è –ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å', '/pause']:
        result = toggle_play_pause()
        if result is True:
            bot.send_message(message.chat.id, "‚úÖ –í–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        elif result == "no_video_tab":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç, –Ω–æ –Ω—É–∂–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –≤–∏–¥–µ–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n–ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –Ω–µ—ë –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ —Å –≤–∏–¥–µ–æ")    

#_______________________________________________________________________
    elif text in ['‚è™ –ø–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥']:
        result = toggle_nazad()
        if result is True:
            bot.send_message(message.chat.id, "‚è™ –í–∏–¥–µ–æ –ø–µ—Ä–µ–º–æ—Ç–∞–Ω–Ω–æ –Ω–∞–∑–∞–¥")
#_______________________________________________________________________
    elif text in ['‚è© –ø–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥']:
        result = toggle_vpered()
        if result is True:
            bot.send_message(message.chat.id, "‚è© –í–∏–¥–µ–æ –ø–µ—Ä–µ–º–æ—Ç–∞–Ω–Ω–æ –≤–ø–µ—Ä–µ–¥")
#_______________________________________________________________________
    elif text in ['üîÅ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞']:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞...")
        if not do_reboot():
            bot.send_message(message.chat.id, "‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
#_______________________________________________________________________
    elif text in ['üîí –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∫']:
        if do_lock():
            bot.send_message(message.chat.id, "üîí –ü–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            bot.send_message(message.chat.id, "‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–ö –Ω–µ —É–¥–∞–ª–∞—Å—å")
#_______________________________________________________________________
    elif text in ['üîä –ø—Ä–∏–±–∞–≤–∏—Ç—å –∑–≤—É–∫']:
        if volume_up():
            bot.send_message(message.chat.id, "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
#_______________________________________________________________________
    elif text in ['üîä —É–±–∞–≤–∏—Ç—å –∑–≤—É–∫']:
        if volume_down():
            bot.send_message(message.chat.id, "üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
#_______________________________________________________________________
#_______________________________________________________________________
    elif text in ['menu', '/start', '/help']:
        bot.send_message(message.chat.id, "–ú–µ–Ω—é:", reply_markup=main_keyboard())

    else:
        if text in ["üéû –º–µ–¥–∏–∞", "–º–µ–¥–∏–∞"]:
            return
        bot.send_message(
            message.chat.id,
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_keyboard()
        )

# Run bot
if __name__ == '__main__':
    logger.info("Starting bot...")
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π –¢–ì –∏ –Ω–∞–ø–∏—à–∏ /start.")
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        bot.send_message(OWNER_TELEGRAM_ID, f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω v{BOT_VERS} \n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {now}")
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        logger.info("Stopping bot")